{"version":3,"sources":["model/WorkoutModel.jsx","components/AddForm.jsx","components/WorkoutsList.jsx","App.js","serviceWorker.js","index.js"],"names":["WorkoutModel","id","date","distance","this","AddForm","currentWorkout","handleAdd","useState","form","setForm","useEffect","handleChange","evt","target","name","value","prevForm","className","onSubmit","preventDefault","workout","shortid","generate","htmlFor","type","onChange","required","step","WorkoutsList","workouts","handleEdit","handleDelete","map","key","onClick","App","setWorkouts","setCurrentWorkout","sortItems","date1","date2","prevWorkouts","filter","prevWorkout","Number","sort","find","item","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4RAAqBA,EACnB,WAAYC,EAAIC,EAAMC,GAAW,oBAC/BC,KAAKH,GAAKA,EACVG,KAAKF,KAAOA,EACZE,KAAKD,SAAWA,G,iBCoELE,EAnEC,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,eAAgBC,EAAgB,EAAhBA,UAAgB,EACzBC,mBAAS,CAAEN,KAAM,GAAIC,SAAU,KADN,mBAC1CM,EAD0C,KACpCC,EADoC,KAGjDC,qBAAU,WACJL,GACFI,EAAQ,CAAER,KAAMI,EAAeJ,KAAMC,SAAUG,EAAeH,aAE/D,CAACG,IAEJ,IAAMM,EAAe,SAAAC,GAAQ,IAAD,EACFA,EAAIC,OAApBC,EADkB,EAClBA,KAAMC,EADY,EACZA,MACdN,GAAQ,SAAAO,GAAQ,sBAAUA,EAAV,eAAqBF,EAAOC,QAc9C,OACE,0BAAME,UAAU,UAAUC,SAZP,SAAAN,GACnBA,EAAIO,iBACJ,IAAMC,EAAU,IAAIrB,EAClBsB,IAAQC,WACRd,EAAKP,KACLO,EAAKN,UAEPI,EAAUc,GACVX,EAAQ,CAAER,KAAM,GAAIC,SAAU,OAK5B,yBAAKe,UAAU,cACb,yBAAKA,UAAU,SACb,2BAAOM,QAAQ,QAAf,4BACA,yBAAKN,UAAU,sBACb,uBAAGA,UAAU,kBACb,2BACEO,KAAK,OACLxB,GAAG,OACHc,KAAK,OACLG,UAAU,cACVF,MAAOP,EAAKP,KACZwB,SAAUd,EACVe,UAAQ,MAId,yBAAKT,UAAU,SACb,2BAAOM,QAAQ,YAAf,mEACA,2BACEC,KAAK,SACLG,KAAK,MACLb,KAAK,WACLd,GAAG,WACHe,MAAOP,EAAKN,SACZuB,SAAUd,EACVe,UAAQ,MAId,4BAAQT,UAAU,YAAYO,KAAK,UAAnC,sDC7BSI,EA9BM,SAAC,GAA4C,IAA1CC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,WAAYC,EAAmB,EAAnBA,aAC5C,OACE,2BAAOd,UAAU,kBACf,+BACE,4BACE,wDACA,+FACA,kFAGJ,+BACGY,EAASG,KAAI,SAAAZ,GAAO,OACnB,wBAAIa,IAAKb,EAAQpB,IACf,4BAAKoB,EAAQnB,MACb,4BAAKmB,EAAQlB,UACb,4BACE,4BAAQgC,QAAS,kBAAMJ,EAAWV,EAAQpB,MACxC,uBAAGiB,UAAU,eAEf,4BAAQiB,QAAS,kBAAMH,EAAaX,EAAQpB,MAC1C,uBAAGiB,UAAU,wBC0CdkB,MA3Df,WAAgB,IAAD,EACmB5B,mBAAS,IAD5B,mBACNsB,EADM,KACIO,EADJ,OAE+B7B,mBAAS,CACnDN,KAAM,GACNC,SAAU,KAJC,mBAENG,EAFM,KAEUgC,EAFV,KAOPC,EAAY,SAACC,EAAOC,GACxB,OAAID,EAAMtC,KAAOuC,EAAMvC,MAAc,EACjCsC,EAAMtC,KAAOuC,EAAMvC,KAAa,EAC7B,GAgBH8B,EAAe,SAAA/B,GACnBoC,GAAY,SAAAK,GAAY,OACtBA,EAAaC,QAAO,SAAAtB,GAAO,OAAIA,EAAQpB,KAAOA,SAalD,OACE,yBAAKiB,UAAU,OACb,yBAAKA,UAAU,gDACb,kBAAC,EAAD,CACEmB,YAAaA,EACb9B,UAjCU,SAAAc,GAChBgB,GAAY,SAAAK,GAAiB,IAAD,gBACFA,GADE,IAC1B,2BAAsC,CAAC,IAA9BE,EAA6B,QACpC,GAAIA,GAAeA,EAAY1C,OAASmB,EAAQnB,KAG9C,OAFA0C,EAAYzC,SACV0C,OAAOD,EAAYzC,UAAY0C,OAAOxB,EAAQlB,UACzC,YAAIuC,GAAcI,KAAKP,IALR,8BAQ1B,MAAO,sBAAIG,GAAJ,CAAkBrB,IAASyB,KAAKP,OAyBnCjC,eAAgBA,IAElB,kBAAC,EAAD,CACEwB,SAAUA,EACVC,WAnBW,SAAA9B,GACjB,IAAMoB,EAAUS,EAASiB,MAAK,SAAAC,GAAI,OAAIA,EAAK/C,KAAOA,KAClDqC,EAAkB,CAChBpC,KAAMmB,EAAQnB,KACdC,SAAUkB,EAAQlB,WAEpB6B,EAAaX,EAAQpB,KAcf+B,aAAcA,OC7CJiB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.0ccb8877.chunk.js","sourcesContent":["export default class WorkoutModel {\n  constructor(id, date, distance) {\n    this.id = id;\n    this.date = date;\n    this.distance = distance;\n  }\n}\n","import React, { useState, useEffect } from 'react';\nimport PropTypes from 'prop-types';\nimport WorkoutModel from '../model/WorkoutModel';\nimport shortid from 'shortid';\n\nconst AddForm = ({ currentWorkout, handleAdd }) => {\n  const [form, setForm] = useState({ date: '', distance: '' });\n\n  useEffect(() => {\n    if (currentWorkout) {\n      setForm({ date: currentWorkout.date, distance: currentWorkout.distance });\n    }\n  }, [currentWorkout]);\n\n  const handleChange = evt => {\n    const { name, value } = evt.target;\n    setForm(prevForm => ({ ...prevForm, [name]: value }));\n  };\n\n  const handleSubmit = evt => {\n    evt.preventDefault();\n    const workout = new WorkoutModel(\n      shortid.generate(),\n      form.date,\n      form.distance,\n    );\n    handleAdd(workout);\n    setForm({ date: '', distance: '' });\n  };\n\n  return (\n    <form className=\"ui form\" onSubmit={handleSubmit}>\n      <div className=\"two fields\">\n        <div className=\"field\">\n          <label htmlFor=\"date\">Дата</label>\n          <div className=\"ui input left icon\">\n            <i className=\"calendar icon\"></i>\n            <input\n              type=\"date\"\n              id=\"date\"\n              name=\"date\"\n              className=\"ui calendar\"\n              value={form.date}\n              onChange={handleChange}\n              required\n            />\n          </div>\n        </div>\n        <div className=\"field\">\n          <label htmlFor=\"distance\">Пройдено (км)</label>\n          <input\n            type=\"number\"\n            step=\"any\"\n            name=\"distance\"\n            id=\"distance\"\n            value={form.distance}\n            onChange={handleChange}\n            required\n          />\n        </div>\n      </div>\n      <button className=\"ui button\" type=\"submit\">\n        Добавить\n      </button>\n    </form>\n  );\n};\n\nAddForm.propTypes = {\n  setWorkouts: PropTypes.func.isRequired,\n};\n\nexport default AddForm;\n","import React from 'react';\n\nconst WorkoutsList = ({ workouts, handleEdit, handleDelete }) => {\n  return (\n    <table className=\"ui basic table\">\n      <thead>\n        <tr>\n          <th>Дата</th>\n          <th>Пройдено (км)</th>\n          <th>Действия</th>\n        </tr>\n      </thead>\n      <tbody>\n        {workouts.map(workout => (\n          <tr key={workout.id}>\n            <td>{workout.date}</td>\n            <td>{workout.distance}</td>\n            <td>\n              <button onClick={() => handleEdit(workout.id)}>\n                <i className=\"edit icon\"></i>\n              </button>\n              <button onClick={() => handleDelete(workout.id)}>\n                <i className=\"trash icon\"></i>\n              </button>\n            </td>\n          </tr>\n        ))}\n      </tbody>\n    </table>\n  );\n};\n\nexport default WorkoutsList;\n","import React, { useState } from 'react';\nimport './App.css';\nimport AddForm from './components/AddForm';\nimport WorkoutsList from './components/WorkoutsList';\n\nfunction App() {\n  const [workouts, setWorkouts] = useState([]);\n  const [currentWorkout, setCurrentWorkout] = useState({\n    date: '',\n    distance: '',\n  });\n\n  const sortItems = (date1, date2) => {\n    if (date1.date > date2.date) return -1;\n    if (date1.date < date2.date) return 1;\n    return 0;\n  };\n\n  const handleAdd = workout => {\n    setWorkouts(prevWorkouts => {\n      for (let prevWorkout of prevWorkouts) {\n        if (prevWorkout && prevWorkout.date === workout.date) {\n          prevWorkout.distance =\n            Number(prevWorkout.distance) + Number(workout.distance);\n          return [...prevWorkouts].sort(sortItems);\n        }\n      }\n      return [...prevWorkouts, workout].sort(sortItems);\n    });\n  };\n\n  const handleDelete = id => {\n    setWorkouts(prevWorkouts =>\n      prevWorkouts.filter(workout => workout.id !== id),\n    );\n  };\n\n  const handleEdit = id => {\n    const workout = workouts.find(item => item.id === id);\n    setCurrentWorkout({\n      date: workout.date,\n      distance: workout.distance,\n    });\n    handleDelete(workout.id);\n  };\n\n  return (\n    <div className=\"App\">\n      <div className=\"ui raised very padded text container segment\">\n        <AddForm\n          setWorkouts={setWorkouts}\n          handleAdd={handleAdd}\n          currentWorkout={currentWorkout}\n        />\n        <WorkoutsList\n          workouts={workouts}\n          handleEdit={handleEdit}\n          handleDelete={handleDelete}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}